name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.70.0  # MSRV (Minimum Supported Rust Version)
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run tests with all features
      run: cargo test --all-features --verbose

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  feature-combinations:
    name: Feature Combinations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          # MCU size categories
          - "small-mcu"
          - "medium-mcu"
          - "large-mcu"
          # Math backends
          - "no_std,integer-math"
          - "no_std,fixed-point"
          - "no_std,floating-point"
          - "no_std,libm-math"
          - "no_std,cordic-math"
          # Chart combinations
          - "std,basic-charts"
          - "std,advanced-charts"
          - "std,line,bar,pie"
          - "std,scatter,gauge"
          - "std,stacked-charts"
          # Animation features
          - "std,animations"
          - "std,line,animations"
          # Memory optimization
          - "no_std,static-only"
          - "no_std,minimal-memory"
          # Color and rendering
          - "std,color-support"
          - "std,anti-aliasing"
          - "std,smooth-curves"
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-features-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-features-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    
    - name: Build with features
      run: cargo build --no-default-features --features "${{ matrix.features }}"
    
    - name: Test with features
      run: cargo test --no-default-features --features "${{ matrix.features }}"

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-examples-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-examples-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    
    - name: Build all examples
      run: cargo build --examples --all-features
    
    - name: Check individual examples compile
      run: |
        # Basic examples
        cargo check --example line_chart --features "std,line"
        cargo check --example bar_chart --features "std,bar"
        cargo check --example pie_chart --features "std,pie"
        cargo check --example scatter_chart --features "std,scatter"
        cargo check --example gauge_chart --features "std,gauge"
        cargo check --example stacked_line_chart --features "std,stacked-charts"
        cargo check --example stacked_bar_chart --features "std,stacked-charts"
        cargo check --example bubble_chart --features "std,scatter"
        cargo check --example temperature_monitor --features "std,line"
        cargo check --example axis_demo --features "std,line"
        cargo check --example legend_demo --features "std,line"
        cargo check --example production_ready_demo --features "std,line"
        cargo check --example theme_showcase --features "std,line,bar,pie"
        
        # Animation examples
        cargo check --example streaming_animation_demo --features "std,line,animations"
        cargo check --example data_transition_demo --features "std,line,animations"
        cargo check --example time_provider_demo --features "std,line,animations"
        
        # Interactive examples
        cargo check --example multi_series_chart --features "std,line"
        cargo check --example multi_series_dashboard --features "std,line,bar,animations"
        cargo check --example real_time_dashboard --features "std,line,gauge,animations"
        cargo check --example unified_streaming_demo --features "std,line,animations"
        cargo check --example interactive_scatter_demo --features "std,scatter"

  no-std-targets:
    name: No-std Targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - thumbv7em-none-eabihf  # ARM Cortex-M4/M7
          - thumbv6m-none-eabi     # ARM Cortex-M0/M0+
          - riscv32imac-unknown-none-elf  # RISC-V
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-
    
    - name: Build for no-std target
      run: cargo build --target ${{ matrix.target }} --no-default-features --features "no_std,basic-charts"
    
    - name: Build with small-mcu features
      run: cargo build --target ${{ matrix.target }} --no-default-features --features "small-mcu"
    
    - name: Build with medium-mcu features
      run: cargo build --target ${{ matrix.target }} --no-default-features --features "medium-mcu"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-docs-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    
    - name: Build documentation
      run: cargo doc --all-features --no-deps
    
    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: lcov.info
        fail_ci_if_error: false